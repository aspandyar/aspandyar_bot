package handlers

import (
	tele "gopkg.in/telebot.v3"
)

type ServerBot struct {
	Bot *tele.Bot
}

var (
	Menu         = &tele.ReplyMarkup{ResizeKeyboard: true}
	BtnBreakfast = Menu.Text("üç≥ Breakfast/–ó–∞–≤—Ç—Ä–∞–∫")
	BtnLunch     = Menu.Text("ü•™ Lunch/–û–±–µ–¥")
	BtnSnack     = Menu.Text("üç™ Snack/–ü–µ—Ä–µ–∫—É—Å")
	BtnDinner    = Menu.Text("üç≤ Dinner/–£–∂–∏–Ω")

	MealSelector  = &tele.ReplyMarkup{}
	BtnProteins   = MealSelector.Data("–ë–µ–ª–∫–∏", "proteins")
	BtnCarbs      = MealSelector.Data("–£–≥–ª–µ–≤–æ–¥—ã", "carbs")
	BtnFats       = MealSelector.Data("–ó–¥–æ—Ä–æ–≤—ã–µ –∂–∏—Ä—ã", "fats")
	BtnAdditional = MealSelector.Data("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", "additional")

	BtnEggs            = MealSelector.Data("–Ø–π—Ü–∞ (2-4 —à—Ç.)", "eggs", "eggs")
	BtnCottageCheese   = MealSelector.Data("–¢–≤–æ—Ä–æ–≥ –∏–ª–∏ –≥—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç", "cottage_cheese")
	BtnTofu            = MealSelector.Data("–¢–æ—Ñ—É", "tofu")
	BtnFish            = MealSelector.Data("–†—ã–±–∞ (—Ç—É–Ω–µ—Ü, —Å–µ–º–≥–∞)", "fish")
	BtnOatmeal         = MealSelector.Data("–û–≤—Å—è–Ω–∞—è –∫–∞—à–∞ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏", "oatmeal")
	BtnWholeGrainBread = MealSelector.Data("–¶–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π —Ö–ª–µ–± —Å –∞–≤–æ–∫–∞–¥–æ", "whole_grain_bread")
	BtnNuts            = MealSelector.Data("–ó–¥–æ—Ä–æ–≤—ã–µ –∂–∏—Ä—ã: –û—Ä–µ—Ö–∏", "nuts")
	BtnAvocado         = MealSelector.Data("–ê–≤–æ–∫–∞–¥–æ", "avocado")
	BtnMilk            = MealSelector.Data("–°—Ç–∞–∫–∞–Ω –º–æ–ª–æ–∫–∞", "milk")
	BtnProteinShake    = MealSelector.Data("–ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π –∫–æ–∫—Ç–µ–π–ª—å", "protein_shake")
)

func InitMarkups() {
	Menu.Reply(
		Menu.Row(BtnBreakfast, BtnLunch),
		Menu.Row(BtnSnack, BtnDinner),
	)
}

func HandleEat(c tele.Context) error {
	return c.Send("Choose your meal for breakfast:", MealSelector)
}

func HandleBreakfast(c tele.Context) error {
	MealSelector.Inline(
		MealSelector.Row(BtnProteins, BtnCarbs),
		MealSelector.Row(BtnFats, BtnAdditional),
	)

	return c.Send("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ó–∞–≤—Ç—Ä–∞–∫. Now, choose your protein source:", MealSelector)
}

func HandleProteins(c tele.Context) error {
	MealSelector.Inline(
		MealSelector.Row(BtnEggs, BtnCottageCheese),
		MealSelector.Row(BtnTofu, BtnFish),
	)

	return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –±–µ–ª–∫–∏ (Proteins):", MealSelector)
}

func HandleCarbs(c tele.Context) error {
	carbsSelector := &tele.ReplyMarkup{}
	carbsSelector.Inline(
		carbsSelector.Row(BtnOatmeal, BtnWholeGrainBread),
		carbsSelector.Row(BtnNuts, BtnAvocado),
	)

	return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ —É–≥–ª–µ–≤–æ–¥—ã (Carbs):", carbsSelector)
}

func HandleAdditional(c tele.Context) error {
	additionalSelector := &tele.ReplyMarkup{}
	additionalSelector.Inline(
		additionalSelector.Row(BtnMilk, BtnProteinShake),
	)

	return c.Send("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:", additionalSelector)
}

func HandleSelection(c tele.Context) error {
	selectedOption := c.Callback().Unique

	var response string
	switch selectedOption {
	case "eggs":
		response = "You chose Eggs (2-4 pieces) as your protein."
	case "cottage_cheese":
		response = "You chose Cottage Cheese or Greek Yogurt as your protein."
	case "tofu":
		response = "You chose Tofu as your protein."
	case "fish":
		response = "You chose Fish (Tuna, Salmon, etc.) as your protein."
	case "oatmeal":
		response = "You chose Oatmeal with fruits as your carbs."
	case "whole_grain_bread":
		response = "You chose Whole Grain Bread with Avocado as your carbs."
	case "nuts":
		response = "You chose Nuts as your healthy fats."
	case "avocado":
		response = "You chose Avocado as your healthy fat."
	case "milk":
		response = "You chose Milk for additional protein and calcium."
	case "protein_shake":
		response = "You chose a Protein Shake."
	default:
		response = "Invalid option."
	}

	return c.Send(response)
}

func (server *ServerBot) RegisterEatHandlers() {
	server.Bot.Handle("/eat", HandleEat)
	server.Bot.Handle(&BtnBreakfast, HandleBreakfast)
	server.Bot.Handle(&BtnProteins, HandleProteins)
	server.Bot.Handle(&BtnCarbs, HandleCarbs)
	server.Bot.Handle(&BtnFats, HandleSelection)
	server.Bot.Handle(&BtnAdditional, HandleAdditional)

	server.Bot.Handle(&BtnEggs, HandleSelection)
	server.Bot.Handle(&BtnCottageCheese, HandleSelection)
	server.Bot.Handle(&BtnTofu, HandleSelection)
	server.Bot.Handle(&BtnFish, HandleSelection)
	server.Bot.Handle(&BtnOatmeal, HandleSelection)
	server.Bot.Handle(&BtnWholeGrainBread, HandleSelection)
	server.Bot.Handle(&BtnNuts, HandleSelection)
	server.Bot.Handle(&BtnAvocado, HandleSelection)
	server.Bot.Handle(&BtnMilk, HandleSelection)
	server.Bot.Handle(&BtnProteinShake, HandleSelection)
}
